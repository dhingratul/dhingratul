[
    {
        "label": "http.server",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "http.server",
        "description": "http.server",
        "detail": "http.server",
        "documentation": {}
    },
    {
        "label": "socketserver",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socketserver",
        "description": "socketserver",
        "detail": "socketserver",
        "documentation": {}
    },
    {
        "label": "webbrowser",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "webbrowser",
        "description": "webbrowser",
        "detail": "webbrowser",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "socket",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "socket",
        "description": "socket",
        "detail": "socket",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "find_free_port",
        "kind": 2,
        "importPath": "scripts.serve",
        "description": "scripts.serve",
        "peekOfCode": "def find_free_port(start_port=8086, max_attempts=100):\n    for port in range(start_port, start_port + max_attempts):\n        try:\n            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:\n                s.bind(('', port))\n                return port\n        except OSError:\n            continue\n    raise OSError(\"Could not find a free port\")\n# Configuration",
        "detail": "scripts.serve",
        "documentation": {}
    },
    {
        "label": "PORT",
        "kind": 5,
        "importPath": "scripts.serve",
        "description": "scripts.serve",
        "peekOfCode": "PORT = find_free_port()\n# Get the root directory (one level up from tests)\nROOT_DIR = Path(__file__).parent.parent.absolute()\n# Change directory to the root directory where index.html is located\nos.chdir(ROOT_DIR)\nprint(f\"Serving files from: {ROOT_DIR}\")\n# Set up the server\nHandler = http.server.SimpleHTTPRequestHandler\nsocketserver.TCPServer.allow_reuse_address = True  # Allow port reuse\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:",
        "detail": "scripts.serve",
        "documentation": {}
    },
    {
        "label": "ROOT_DIR",
        "kind": 5,
        "importPath": "scripts.serve",
        "description": "scripts.serve",
        "peekOfCode": "ROOT_DIR = Path(__file__).parent.parent.absolute()\n# Change directory to the root directory where index.html is located\nos.chdir(ROOT_DIR)\nprint(f\"Serving files from: {ROOT_DIR}\")\n# Set up the server\nHandler = http.server.SimpleHTTPRequestHandler\nsocketserver.TCPServer.allow_reuse_address = True  # Allow port reuse\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(f\"Server started at http://localhost:{PORT}\")\n    # Open the default web browser",
        "detail": "scripts.serve",
        "documentation": {}
    },
    {
        "label": "Handler",
        "kind": 5,
        "importPath": "scripts.serve",
        "description": "scripts.serve",
        "peekOfCode": "Handler = http.server.SimpleHTTPRequestHandler\nsocketserver.TCPServer.allow_reuse_address = True  # Allow port reuse\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(f\"Server started at http://localhost:{PORT}\")\n    # Open the default web browser\n    webbrowser.open(f'http://localhost:{PORT}')\n    # Start the server\n    try:\n        httpd.serve_forever()\n    except KeyboardInterrupt:",
        "detail": "scripts.serve",
        "documentation": {}
    },
    {
        "label": "socketserver.TCPServer.allow_reuse_address",
        "kind": 5,
        "importPath": "scripts.serve",
        "description": "scripts.serve",
        "peekOfCode": "socketserver.TCPServer.allow_reuse_address = True  # Allow port reuse\nwith socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n    print(f\"Server started at http://localhost:{PORT}\")\n    # Open the default web browser\n    webbrowser.open(f'http://localhost:{PORT}')\n    # Start the server\n    try:\n        httpd.serve_forever()\n    except KeyboardInterrupt:\n        print(\"\\nServer stopped by user\")",
        "detail": "scripts.serve",
        "documentation": {}
    }
]